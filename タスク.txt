タスク分け

若干色々とおかしい点がある。気付いたら指摘して下さい。

蓋を開けてみたら割りと余裕の無いプロジェクトとなってました。頑張りましょう（棒読み）
つーか本音いうとかなり厳しいと思います＾ｑ＾割りと実装開始直後から凍結リーチ。
自身のタスクに責任を持って、進捗管理を行い、やばいと思ったら早め早めのヘルプ要請をして下さい。
ソースレベルの確認は先月の反省も踏まえ行うつもりですが、如何せん数が多すぎるので全部を把握するのは無理です。
そこら辺は先月の反省も踏まえ、各々判断出来るのが望ましいと思います。
炎上！♪プロジェクト燃え続け！♪異っ常！終わらない徹夜作業！♪心折れる、誰かキレる！♪..........

タスク着手前にイメージを作る事。連携する場面では必要に応じて担当者間で話すこと。
リファクタリングでめんどうな経験しているので、その点を必ず生かすこと。
次に大規模なリファクタリングを要求されたら各タスクの責任とする事を念押ししておく。

主にセッション操作やログイン関連において、SSO導入段階で大幅な改修が必要となる場合があるが、
実装フェーズ1においてSSOについては特に考慮しない。

以下に記された各Action,DAO,DTO,フィールド名や変数名を当プロジェクトの命名規約とする。その他については命名規約.zipに準拠する。
変更を行う場合は必要に応じて確認を取る事と本テキストの変更を必ず行うこと。独断で新しく生成したり変更するのは絶対NG（前回はそれが見受けられた）
ぶっちゃけ命名がおかしいんで、適した形にした方が良いと思う。良案があれば変更しましょう。特にjsp

excuteメソッドの戻り値変数名はresult（他メソッドについては戻り値の型に応じて先月みたいな形での変更は可能とする）で統一
ここらへんは書かなくても先月の苦労が身にしみているはず！

下記タスクをフェーズ1とし、8日の時点で50％、9日の時点で80％、10日で100％を目安とする。
残る13日〜14日をフェーズ2とし、solareブラッシュアップ、tourtike改修、SSO導入における改修、redmineをaws上に構築するタスクに当てる事とする。

-----------------------------------------------------------------------
担当：半田
Top.jsp
今回はトップからの遷移は1つ。
レビュー時にコース一覧等をデータベース管理とすることを提案されている。
※ユーザー視点でログイン状態が保持されているか判断がつかない点が懸念点
→ログイン状態を保持することを止めるか、ログイン状態が保持されていることを表示する

GoToLoginAction
InsertReservationDAO　選択した予約を仮登録する。本登録は予約確認ページ後に行われる。
ログインページへ遷移するアクション
ログイン情報を保持している場合はログインページを経ずに次ページへ遷移される。
選択した予約情報をDB設計に則した形でインサートする。
なお、この時点でログインされていないケースを想定し、IPアドレスとUUIDに拠るユーザー識別を行うこととする。
生成したUUIDはセッションに格納される（キー：uuid）。

Login.jsp
LoginAction
LoginDAO
LoginDTO
やることは前のプロジェクトと変わらない。
ログインした後はセッションにログイン情報を格納しておくこと。
user_id,user_pass

GoToNewCustomerRegistrationAction
単なる遷移アクション

TwitterLoginAction
InsertTwitterUserDAO //ツイッターユーザー用の仮アカウントを作る
TwitterAccessToken
TwitterRequestToken
アクセストークンを取得できるはずなので、一旦DBにアクセストークンで照合をかけ、既存ユーザーかどうかを判断する。
既存ユーザーでなければ、アクセストークンを基に仮アカウントを作成し、ログインをさせる。
oauth経由のユーザーは別途ユーザー情報が必要なのでそのページに遷移させる。
-----------------------------------------------------------------------
担当：岩井
NewUser.jsp
GoToNewUserConfirmAction
GoToNewUserConfirmAction-Validation.xml
InsertNewUserDAO
先月の見てやれば出来る。　　　と思う。
制限はなるべく行わなくて良い。
ちなみにバリデーションで制限掛けてもいいし、アクションで制限かけてもどっちでもいい。
この段階でDBにインサートを行う。この場合仮登録扱いとなる。
入力された値についてはリスト型の入れ物に格納して、次ページにてそれで表示する。
ハイフン有り無し両方に対応すること。DBにインサート時はハイフンを除く。

TwitterUser.jsp
GoToTwitterUserConfirmAction
GoToTwitterUserConfirmAction-Validation.xml
先月の見てやれば出来る。　　　と思う。
制限はなるべく行わなくて良い。
ちなみにバリデーションで制限掛けてもいいし、アクションで制限かけてもどっちでもいい。
この段階でDBにインサートを行う。この場合仮登録扱いとなる。
入力された値についてはリスト型の入れ物に格納して、次ページにてそれで表示する。

NewUserConfirm.jsp
InsertNewUserDAO
InsertNewUserDTO
GoToNewUserCompleteAction
BackToNewUserAction

TwitterUserConfirm.jsp
InsertTwitterUserDAO
InsertTwitterUserDTO
GoToNewUserCompleteAction
BackToTwitterUserAction
NewUserとほぼ同じだけど、仮アカウントはアクセストークンのみを基に作られていて、
そのアクセストークンで作成された仮アカウントの情報に上書きする形で入力された情報をインサートする点に注意
ちなみに、カスタマーIDとカスタマーパスワードについては不要です。
ハイフン有り無し両方に対応すること。DBにインサート時はハイフンを除く。
-----------------------------------------------------------------------
担当：林
NewUserComplete.jsp
登録完了画面

GoToReservationConfirmAction
遷移アクション

ReservationConfirm.jsp
GoToReservationCompleteAction
InsertConfirmDAO
InsertConfirmDTO
予約確認画面
遷移元から受け取った値を表示する

ReservationComplete.jsp
LogOutAction
(GoToMyPageAction)

(MyPageLogin.jsp)
-----------------------------------------------------------------------
担当：岡部
MyPage.jsp
GoToCustomerInfoEditAction
GoToReservationEditAction

CustomerEdit.jsp
GoToUpdateCustomerConfirmAction
GoToLeaveAction

CustomerEditConfirm.jsp
UpdateCustomerInfoAction
UpdateCustomerInfoDAO
UpdateCustomerInfoDTO

CustomerEditComplete.jsp
(GoToMyPageAction)

Leave.jsp
DeleteCustomerInfoAction
DeleteCustomerInfoDAO
(GoToMyPageAction)
-----------------------------------------------------------------------
担当：松本
LeaveComplete.jsp

ReservationEdit.jsp
ReservationEditAction

ReservationEditConfirm.jsp
UpdateReservationEditAction
UpdateReservationEditDAO
UpdateReservationEditDTO
(GoToMyPageAction)

ReservationEditComplete.jsp
(GoToMyPageAction)
-----------------------------------------------------------------------
担当：佐藤
Cancel.jsp
DeleteReservationAction
AllDeleteReservationAction
DeleteReservationDAO
DeleteReservationDTO
(GoToMyPageAction)

CancelCompletion.jsp
(LogOutAction)
(GoToMyPageAction)

Error.jsp
ReturnTopAction

DBメンテナンスプログラム
知らん

GoToReservationAction
GetSeatInfoDAO
GetSeatInfoDTO
予約画面への遷移アクション
遷移と同時にデータベースから空席状況を取得する。
満席を150席とし、130席の場合「△」、150席の場合「×」とjspに表示される。
なお、満席時の予約はリジェクトされる仕様とする。

GoToMyPageAction
単なる遷移アクション
ログイン情報を保持している場合はログイン画面を経ずにマイページへ遷移される。

Reservation.jsp
遷移元アクションから渡された値（空席情報）を1週間表示する
-----------------------------------------------------------------------
レビューで指摘を受けた点

ボタン名user_id等は不適切
_を使用するのは内部の変数名であってユーザー向けではない
User Acc等に変更する

idを使用するのであればIDと表記するのが適切

pass等、ユーザー向けページで省略すべきではない。PassWord等がふさわしい。

confirm_passも前述と同様

My PageやMyPage、空白が有ったり無かったりするので統一が望ましい。

確認画面等ではパスワードを表示しない。

ボタン「No」「Ok」では分かり辛いので変更すること。Register、Cancel等が良い。

10:00AM表記は内部変換でめんどうなので24:00表記に変更

Desideボタン→Applicationに変更

ページ名でCompleteを使用している場合、Completed or Completeを先にする


【更新履歴】
4/7　半田タスクGoToReservationAction〜Reservation.jsp、佐藤タスクへ振り分け（松本）